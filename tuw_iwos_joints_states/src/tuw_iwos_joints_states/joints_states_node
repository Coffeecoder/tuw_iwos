#!/usr/bin/env python3

import message_filters
import rospy
import sys

from tuw_nav_msgs.msg import Joints


class JointsStatesNode:

    def __init__(self, states_topics):
        self._node_name = 'IWOS_JOINTS_STATES'

        self._states_topics = states_topics
        self._states_subscriber = None
        self._publisher = None

    def run(self):
        rospy.init_node(self._node_name)
        self._states_subscriber = [message_filters.Subscriber(topic, Joints) for topic in self._states_topics]
        self._publisher = rospy.Publisher(name="iwos_state", data_class=Joints, queue_size=100)
        slop = 1/(2 * rospy.get_param(param_name='joint_state_hz', default=30))
        time_synchronizer = message_filters.ApproximateTimeSynchronizer(self._states_subscriber, 100, slop)
        time_synchronizer.registerCallback(self.time_synchronizer_callback)

        rospy.spin()

    def time_synchronizer_callback(self, *messages):
        state = Joints(
            header=messages[0].header,
            name=[n for n_list in [list(message.name) for message in messages] for n in n_list],
            position=[p for p_list in [list(message.position) for message in messages] for p in p_list],
            velocity=[v for v_list in [list(message.velocity) for message in messages] for v in v_list],
            torque=[t for t_list in [list(message.torque) for message in messages] for t in t_list])

        self._publisher.publish(state)


if __name__ == '__main__':
    try:
        arguments = rospy.myargv(argv=sys.argv)
        states_topics_arg = arguments[1:]
        steering_controller_node = JointsStatesNode(states_topics=states_topics_arg)
        steering_controller_node.run()
    except rospy.ROSInterruptException:
        rospy.logerr('ROS Interrupt Exception')
