#!/usr/bin/env python
PACKAGE = "tuw_iwos_odometer"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("samples", int_t, 1, "number of samples", 1000, 0, 1000000)

gen.add("apply_measurement_noise", bool_t, 0, "publish odom message", True)
gen.add("alpha_revolute", double_t, 0, "measurement noise revolute", 1.0, 0.0, 10.0)
gen.add("alpha_steering", double_t, 0, "measurement noise steering", 1.0, 0.0, 10.0)
gen.add("alpha_1", double_t, 0, "measurement noise steering", 1.0, 0, 10)
gen.add("alpha_2", double_t, 0, "measurement noise steering", 1.0, 0, 10)
gen.add("alpha_3", double_t, 0, "measurement noise steering", 1.0, 0, 10)
gen.add("alpha_4", double_t, 0, "measurement noise steering", 1.0, 0, 10)
gen.add("alpha_5", double_t, 0, "measurement noise steering", 1.0, 0, 10)
gen.add("alpha_6", double_t, 0, "measurement noise steering", 1.0, 0, 10)

gen.add("publish_odom_message", bool_t, 0, "publish odom message", False)
gen.add("broadcast_odom_transform", bool_t, 0, "broadcast odom transform", False)

gen.add("revolute_velocity_tolerance", double_t, 0, "tolerance for revolute velocity matching",  0.025, 0.0, 1.0)
gen.add("steering_position_tolerance", double_t, 0, "tolerance for steering position matching", 0.025, 0.0, 1.0)
gen.add("calculation_iterations", int_t, 0, "number of odometer calculation iterations", 100, 0, 1000000)

exit(gen.generate(PACKAGE, "tuw_iwos_odometer", "EncoderOdometer"))
